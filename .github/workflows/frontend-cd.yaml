name: frontend-continuous-deployment

on:
  workflow_dispatch:
  pull_request:
    branches: 
      - master

env: 
  NODE_VERSION: 18.16.1
  IMAGE_REPO_NAME: frontend
  IMAGE_TAG: latest

jobs:
  lint-test:
    name: Run lint and test frontend
    runs-on: ubuntu-latest
    defaults:
      run: 
        working-directory: ./starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Nodejs environment
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      
      - name: Install dependencies
        run: |
          npm install
          npm install prettier@2.8.8 --save-dev
        
      - name: Run lint
        run: |
          npm run lint

      - name: Run test
        run: |
          npm run test
  
  deploy:
    name: Build and push docker image to ECR
    runs-on: ubuntu-latest
    needs: [lint-test]
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credential
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{vars.AWS_DEFAULT_REGION}}

      - name: Login AWS ECR
        uses: aws-actions/amazon-ecr-login@v2
        with: 
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{vars.AWS_DEFAULT_REGION}}
      
      - name: Build, tag and push docker image to AWS ECR
        run: |
          aws eks update-kubeconfig --name cluster
          kubectl get svc
          export EXTERNALIP=$(kubectl get svc backend -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}{"\n"}{.status.loadBalancer.ingress[0].ip}')
          echo "EXTERNALIP=$EXTERNALIP"
          docker build --build-arg=REACT_APP_MOVIE_API_URL=http://$EXTERNALIP -t ${{env.IMAGE_REPO_NAME}} .
          docker tag ${{env.IMAGE_REPO_NAME}}:${{env.IMAGE_TAG}} ${{vars.AWS_ACCOUNT_ID}}.dkr.ecr.${{vars.AWS_DEFAULT_REGION}}.amazonaws.com/${{env.IMAGE_REPO_NAME}}:${{env.IMAGE_TAG}}
          docker push ${{vars.AWS_ACCOUNT_ID}}.dkr.ecr.${{vars.AWS_DEFAULT_REGION}}.amazonaws.com/${{env.IMAGE_REPO_NAME}}:${{env.IMAGE_TAG}}

      - name: Update kubeconfig, deploy to EKS
        run: |
          aws eks update-kubeconfig --name cluster --region ${{vars.AWS_DEFAULT_REGION}}
          cd k8s
          kustomize edit set image frontend=${{vars.AWS_ACCOUNT_ID}}.dkr.ecr.${{vars.AWS_DEFAULT_REGION}}.amazonaws.com/${{env.IMAGE_REPO_NAME}}:${{env.IMAGE_TAG}}
          kustomize build | kubectl delete -f -
          kustomize build | kubectl apply -f -
